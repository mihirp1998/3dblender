import _init_paths
import os
import sys
import argparse
import os.path as osp
import random
import numpy as np
import utils
from mathutils import Vector
from lib.tree import Tree
from modules import Layout, Combine, Describe

# Made changes to expand_tree(), sample_tree_flexible(), refine_tree_info(), _set_describe_bbox(), _combine_bbox()
# Ready for 3d

######### hyperparameters ##########

# module list
module_list = ['layout', 'describe', 'combine']

# children dict
children_dict = dict()
children_dict['layout'] = 2
children_dict['describe'] = 1
children_dict['combine'] = 1

# we will have two split dict for modules for designing a zero-shot setting

module_dict_split1 = dict()
module_dict_split2 = dict()
module_dict_all = dict()

# Zero shot split
# objects list
module_dict_split1['describe'] = ['cube']
module_dict_split2['describe'] = ['cylinder', 'sphere']
# module_dict_all['describe'] = ["cube", "cheese", "tomato", "jalapeno", "chilli", "lettuce", "cucumber", "bell_pepper", "sphere", "cylinder", "Broccoli", "cabbage", "Carrot", "Eggplant", "Garlic", "Onion_green", "Parsley", "Onion", "Potato", "Radish"]
# module_dict_all['describe'] = ["cheese", "jalapeno", "chilli", "lettuce", "cucumber", "Broccoli", "Carrot", "Garlic", "Parsley", "Radish"]
# module_dict_all['describe'] = ['03797390_3d1754b7cb46c0ce5c8081810641ef6']
# module_dict_all['describe'] = ['02958343_10716a366de708b8fac96522b26f7fd']

module_dict_all['describe'] = ['02958343_7bce50c36d8166608e35db9103756ad5','02958343_c916164d0e5c667a75ef328fc121b1c5','02958343_cab3b584786dda8c85c68dc758ce6c5','02958343_aa9cb692a7ca1070b2d2900ee0ae7e0','02958343_642b4f6a2ce0e388284432ce2f42f498','02958343_a262c2044977b6eb52ab7aae4be20d81','02958343_420d1b7af7ceaad59ad3ae277a5ccc98','02958343_a015b428cf628af3522dcdfaad316d22','02958343_ac482136fc30fd5ad8f405c5ec4e8cb0','02958343_a0a1b0377d72e86bab3dd76bf33b0f5e','02958343_234902223d35129de74a9a0d75c085be','02958343_24d7494c6b92c6e7c1bbb501b1d87871','02958343_93357732c6306cb51673e1c313348a01','02958343_d45b86de9175d1c8becf71e2e014ff6f','02958343_90b4f0d3187ad88c26a3125b78368401','02958343_c54dbefca6290ee8a3b392b986583','02958343_a9aea98c1e79a2e6e99225f2edcc7982','02958343_9cdd8cd41303cbdc650bba674124a73b','02958343_44eb9496921072b6e5f9082491d52810','02958343_2cd119ce9ec61f1af63ee8a34069b7c5','02958343_7f42d57ca7041f2df43d27ed950b5659','02958343_2254e63f695a1cccbbae182929bb7dd','02958343_933b88ebf7eff4c095551e0d9e50cb0d','02958343_68b62b9b9d49f262b12ea83455b0f44','02958343_4773cf28df771861b112e5ac235c21b7','02958343_8aeeed96e4597ca6853c6f214c15e60f','02958343_a7f8cb46717528edace5721ccacba16','02958343_d4e611a541a5b01473f10e6caaeca56','02958343_6615a61a799c144e84306f3bf0a1f2d7','02958343_fe3dc721f5026196d61b6a34f3fd808c','02958343_70d31e0100cab3fd77954285e7764e1b','02958343_d164a37bffeb5a83f04c8b6c3407554','02958343_7112c1cb9b6461c9a551e6372afde900','02958343_30d360f644e8cd472eff38f357a7b528','02958343_ff3c8e21a48ed17cc1bcae9def1986da','02958343_e673f203b40ef869567880160b3acb12','02958343_2b075c9c5d85bc779c75e543b21e90a7','02958343_f66180e68fb1c98469f2880702ff1c7d','02958343_9c7cbe5b36b7ae9216abce8cb03e7794','02958343_6c1568ee8807fb73aa69dfdc5532bb13','02958343_49e4cffd7736c34362b21e1bf23b9ba8','02958343_8bf8a7694267756e3ab3dfa44f5fab01','02958343_c7ce82b4b1e795b0cfd826dd468a5497','02958343_685f2b388b018ab78cab9eeff9aeaee2','02958343_c59c26c90a724e84ce27281f3b76d1f5','02958343_9375ded98380ccc77bbf13cb42ad9d73','02958343_58a500adc776ffd5a9655fa3e976d18a','02958343_584a78bbf7932674d4fdf31cc2d78fd0','02958343_9fc18cf33ac91041425b2c354eccabaf','02958343_f5e0edd70d644777cf1e58caa15acb49','02958343_c911f8a7084e7929593b8de380af24a3','02958343_2e0051c6acf7798d2c581ef6c05d52ce','02958343_e24f388736f4e6fd2cdd250493632937','02958343_c41580019d43348d3a3afd30f2e86bd7','02958343_c06a5f0315b3784dcece4698ae3579cc','02958343_d07300cbf12c42c3c427f8508e3d634b','02958343_6058ad4a6ec4eba46436916a86a90ed7','02958343_f87f654f056b3679f4103381793c29f7','02958343_a8a4b511451c2f36463d04eb22b0bb17','02958343_550d6c4149699f4f93de227e8a339990','02958343_3363bde33b9abfbf7c5640de9da0cd4','02958343_4a8aaa19c413328d2557e2b5350c7e1f','02958343_58dfa36440ada6cf2a9eb0f146e94477','02958343_e4c4167bc6b8e77dccdeba95a15fc6d1','02958343_139df45393b6847838805e546aa28d99','02958343_371c5e74c66d22d451973ec97171fea3','02958343_1c351358afff1cc582e5e3e7771ea25','02958343_24c0c6d558d4d01d8772618b7452025','02958343_49888b45d4bf55a530855e8db75dec30','02958343_88a814d2107f882d3d30c6f269d07627','02958343_aff67f837a958d2329984c4afd2e98a4','02958343_41a6deadd39b4c754d0f9a1ef5f184fe','02958343_9fda50a84e042ff1a7e7e5ea49ad8e45','02958343_eb59c9376d1e04ab49352dd33f95cb9e','02958343_fc99fdfd71b5662a669a6bfc71569d','02958343_e0f1de19f0f65ce09123224ebaa118d3','02958343_8fc3cde1054cc1aaceb4167db4d0e4de','02958343_dfec37059dcbf6e64819e00d73fd49e1','02958343_5a9a67bb92fbfca3b1bb46d2556ba67d','02958343_bfa5b41549e86f3c618e9d35559b7aa','02958343_e40b027b68ff767d76ad064d1c5fdd7c','02958343_54d525937d9c6921afe717997470b28d','02958343_f21bd46dced01bd835da01f298003d56','02958343_45f0ea3cd0df8624e341b5704aa568bd','02958343_fcd90d547fdeb629f200a72c9245aee7','02958343_a3d0bbca6bf8a565dc90bfc1d450ece8','02958343_ebd820a0694086e81f0d59cde6139796','02958343_7c9136f3fdbd6c5938948312b270283a','02958343_b6bcc1b1ccbf0ea0996e71cb10be68ac','02958343_156d4748560997c9a848f24544821b25','02958343_fc5d8e25052fb713f559279c88cd9a37','02958343_435d3d83b7511e39f44e15caa8fd94b4','02958343_94edffd805dc965ca5626f7e1b38f05f','02958343_3dd52c850785a6ebbaf1745483a8b34a','02958343_128ad72f92a3e96db96212c8f6cd06e','02958343_5621ebf65ffd38468772afa45900d07f','02958343_1f0d149b320aa4faafe1d4530f4c6e24','02958343_f9eaaf5abb238c22851f021b9ed69c58','02958343_1cf08633fc7e8d193d21cf61f69e40a4','02958343_7c7e5b4fa56d8ed654b40bc735c6fdf6','02958343_ff5ad56515bc0167500fb89d8b5ec70a','02958343_8680d89294724815d9976212be28e1b','02958343_b30efada80553a1d202258c0423dde73','02958343_31ae8e03d831a85cafe1d4530f4c6e24','02958343_1aef0af3cdafb118c6a40bdf315062da','02958343_c98c68f41fe8747fb376886260eb15c1','02958343_92c882d35dfca864acee48fc4abca0f4','02958343_9a806af16e5a102786d01a5629641c74','02958343_25f9e0e65b8fae1f9916e41a3ca14d3a','02958343_f3205edd456cf36feabc798aaf5f039f','02958343_e92786612a9d60455dca6305fb9f97ca','02958343_1b94aad142e6c2b8af9f38a1ee687286','02958343_ca9a4a00209632808acb0ff76f4aec7d','02958343_1feaf720692bdacc27a1a7fdc1941283','02958343_63f9acc425dba89d68c45fd057f7db12','02958343_f8dc466677c26ac6f63ee8a34069b7c5','02958343_9ca127580ac4f9712aba37016d02e162','02958343_e607a20da6c5132dd141480e2c154d3','02958343_b28d1b3e81f407571c02ebb3dd0baeb1','02958343_3f702ea027037a5c4d18baf048fb19eb','02958343_dc2c49d8617d400daa44bfa127abe4bb','02958343_490812763fa965b8473f10e6caaeca56','02958343_cdd00143a3e1e33bbecf71e2e014ff6f','02958343_d63110386a6bbd52d647b1c17442c93','02958343_3335fb305afa0494d3c820a40c219fa9','02958343_9e136de952f33de0a1830153974050c','02958343_70cf106dd369bf3ac427f8508e3d634b','02958343_3e823f89c611fe57a413908c0e169330','02958343_70d46fce66801e0f16abce8cb03e7794','02958343_d98b63a9e35f50b46a835a8530f31f70','02958343_49da37115bf906a7548ac25911d2130a','02958343_a720d17573022d9ac00fd1150223027','02958343_5089b134ef31941edacf4de272c1e30','02958343_f8c4bfc065e35555aa44bfa127abe4bb','02958343_4c60f32b6efdc7217dfb1ee6a4b12bf8','02958343_56478692749392a19dfd5136ef0f2af','02958343_86ab1c2ea989fda9ab15905beabd3f20','02958343_5523a6798194043146810e868f84ab51','02958343_61c4db4cd886250f473f10e6caaeca56','02958343_6ee6fa5c8d664f1349314ffcec1f2f7f','02958343_f4532b1f55191eb7b9ad5039d820c924','02958343_f24129eb2169197c203f35d9b3b48203','02958343_54b89bb4ed5aa492e23d60a1b706b44f','02958343_bb9109ffb1789e98e55e3289e5df0916','02958343_1c1a3dc04b6f1f8fd8162cce87567b4','02958343_53b6f9eb4337276473f10e6caaeca56','02958343_1c7a2752e1d170e099399ee63318a21b','02958343_a532b61524432d454ed192f2298faac','02958343_7bb54d802ac6156ab96212c8f6cd06e','02958343_49b67421f1aecb54619e733243629008','02958343_f4c4bc930957be4951e9a28466112d97','02958343_30ad4418703c8cd2f1da888faee23fa4','02958343_41b4832983f44aa3a7fd25564c2e888e','02958343_ebe05fb264a56628d7ef29ade0716b6c','02958343_c34ef43ef8ccc3a701a8678a1e8d9e5','02958343_a37a9d8847ca3b90e6052439e5a76d12','02958343_3af1559045965b6f1f1bf16cb0b58c6d','02958343_21eba3c73a705597db2c2b0116c82e56','02958343_e899ede8bbc146278746a6bea8ba48d','02958343_82c224e707f63304acb3c21764457201','02958343_2d817a6f23d35494d991a658ca89186','02958343_bbc4f08aacdff9c7a8ed0bb390c8ebb7','02958343_c43b1ebad0ba016a7fd25564c2e888e','02958343_1c4590ebc214e029816bd8f64e08b2bc','02958343_358ddbe8b39125e9e81913b1de19c3f7','02958343_14d47aa57151ae4baa93570ec0c0afff','02958343_a2fa9237519db867f606d4ef0b8dbe5b','02958343_bef5b9686c2f93f46a2345809e2bb169','02958343_472f62cb87c3f1606e04fb225ca92772','02958343_1b85c850cb4b93a6e9415adaaf77fdbf','02958343_bc587f9680c5ea9b58be2d1dec5d09d7','02958343_e61dadc02535e6e44b6e62b17dc78f70','02958343_306f684fa89eb73ee151bdef07e713a2','02958343_35a32cbdfd9e7ba460ed0d611ab79ae0','02958343_4856ef1e80d356d111f983eb293b51a','02958343_eaeabed4e984364868ebd0cfefbb61e9','02958343_2e8a1ae108dd0d89e8a3b392b986583','02958343_f9584908ada1c74bc2b93f7e42be3ac1','02958343_338eb8e836639e09f8f1f8fdb364ff3c','02958343_b7f957411c3353432fedd0aa3d156746','02958343_6201a29763c2256a2bb5796f842ca661','02958343_35d8d94bdd379556a37f3fc191551700','02958343_202648a87dd6ad2573e10a7135e947fe','02958343_2650c2325b7a8d0c811f8dcd8963ced5','02958343_721dfe60b48849ec7ac8cd969c3298ce','02958343_fdcc09ad608e95b4b631b59d5abd1cf8','02958343_579bc3731a8a25f7c639b4cb04d4d746','02958343_a88baf98bc73649fdd61bedeefabbeb6','02958343_82a783a1ea4e34b8d7755e7baabe8a6f','02958343_8e145be3c332199dd6821061f4432a0','02958343_25de320e58cb3898f43db49cede9f847','02958343_2ecbacde09270d49cbf57aaa2ef6598c','02958343_6ad0379c2f24581a1c0f83a9278e7dbc','02958343_3ca3c91dae8d2cbdf56f8ea3d9016e55','02958343_8c0fd2f204d6008da1b543d55837199','02958343_4c456e47a09ec8c96c13d41607812b45','02958343_83098846c82db490a00a2bd11cd80551','02958343_f5a54f0cf2b575fa9fe1734a6086750','02958343_8783151b8f23f41144ad526dfb20e2f9','02958343_48f5446e6ac9c1b51f1446551412bde4','02958343_618e8b78bfa803dab1bb46d2556ba67d','02958343_5316fab78a6732f0428df271ebc70bc0','02958343_a2b3346bf52d4d5acee5b7ceecf56d71','02958343_d443e86ae023ceeb16abce8cb03e7794','02958343_ba0c32b3feba49b0b40adee184c371d0','02958343_3500ccddade6926233307cdc293a210c','02958343_c00e0066715c2226921cb81cb1632a5e','02958343_1eb3cb637ccffd14597505fd7d99b613','02958343_3a5ce33bac316d8f6379c5e421c1d27','02958343_e0901a0a26daebea59139efcde1fedcb','02958343_ba817f535c2668081f757787330d376f','02958343_c951be855f20a1bfb2a29f45da811562','02958343_26d201a532879a60a7fd25564c2e888e','02958343_c54586fc90acb4d0a46498323e7a9af5','02958343_60066a5369f1354e631a23fef2ba638b','02958343_41175e2053fb636852e23117ce8d150e','02958343_22bc49837550bed21e570d3da54bf9d','02958343_721ef3846535bfad179005454847728d','02958343_fe2e5f0993bbd4726fadd0e0ad926818','02958343_9eaafc3581357b05d52b599fafc842f','02958343_73dd68fb65a4f4d25d9d397842621b7','02958343_468780ef4ace9a422e877e82c90c24d','02958343_f578a26ffc6771b21767453ad70570c6','02958343_719912031bd692fbd02bf342687ad381','02958343_7f701224ca471b2ab8013668e30e23b0','02958343_2b9cebe9ceae3f79186bed5098d348af','02958343_99f49d11dad8ee25e517b5f5894c76d9',
'02958343_48260abd4ff73f99473f10e6caaeca56','02958343_8601cca4ddfd28af18bc22abef3f86ce','02958343_6e1d942233917ae996c458818630d123','02958343_72d1eb25d911b6d8913eef1194316fef','02958343_d47353fc60390df85d918097f81825e3','02958343_cc7f51159a1a12fea7fd25564c2e888e','02958343_c8849755b29ad49b9af07fbc15eb8427','02958343_34211d29d94cbd52b7c4f0665aafbacd','02958343_7e6da78c8dde0479f30da7304391ba9f','02958343_4ceeed48d1a48d4ce09e4fc69d1a2697','02958343_7a13aaf4344630329ed7f3a4aa9b6d86','02958343_9009d75263e350ffb3b0f00a15b90e0a','02958343_36c4d31969a8c1111a31578ee9a364cd','02958343_99a7f916d137e69bf2cdad303f49c9f9','02958343_906e1969f7974f85977b27045b1d8055','02958343_58d9741ad324623e9872e22d6b8eb647','02958343_89765af115d9a4955591fcdffe729c55','02958343_7492ced6cb6289c556de8db8652eec4e','02958343_9f4bbcf9f51fe1e42957c02bdefc95c8','02958343_1c490bf1c6b32ef6ff213501a803f212','02958343_4ff291758d03aab8d935b10ea652d50e','02958343_6c85063bf5e983a3d14b144052416695','02958343_3bb3b6b85e4e42873680ae1a67758160','02958343_1bb6b1ff46096f592dfac2620a0cf07b','02958343_a471cdae8ec5df5c9e317a6cc797b629','02958343_1724ae84377e0b9ba6c2c95b41a5446d','02958343_1cf17a1e1841d10c9e6a3356df3f3d9a','02958343_d6390f62d9e036efb1bb46d2556ba67d','02958343_8a5b15ec0ed8e9aaba44b506f43666fc','02958343_d014af11d76dbf667aaf79c2db0c7371','02958343_2f369806f69ba9cb55048eb8b7ed14b6','02958343_c4c21e09e91292b03f82402961906323','02958343_1089cbe82dc0e72133d7c9e122eec9b6','02958343_b688cde1a09ea5d3b1bb46d2556ba67d','02958343_3973846825fc4d857cb2a55fa21392b7','02958343_5d2e6410d4fb760befdff89bf9a96890','02958343_f8b92a0ea7f4705c9fec71e8f4aac226','02958343_65e3e2893669a09cc7b48e36e31209b9','02958343_c975716963b72b72236804c5ee26a2ab','02958343_5f78048536beb320afe1d4530f4c6e24','02958343_263e3ee9f0182cc48e35db9103756ad5','02958343_decdf28e46edc632bda733a39f84326d','02958343_29793366c4b45bf6f43c51e53897fea','02958343_7f0f750d6ca959b6ac5eab1f4e9b0f1a','02958343_1d700f9bfc275cd23681114f72c10d56','02958343_29e9a4beeaeea1becf71e2e014ff6f','02958343_59c662d403a108d47074a72a1ea2aef2','02958343_dda0d7e01642f399d4118745f38eac76','02958343_1abeca7159db7ed9f200a72c9245aee7','02958343_411d95c06a7e9456b3b0f00a15b90e0a','02958343_21b8d0946135481a8772afa45900d07f','02958343_b48b8791a3b09753b8d3554bd033ee9b','02958343_dd240a8334032434bda733a39f84326d','02958343_95ea282dbee00d45ffe141441005acc5','02958343_e95d4b7aa9617eb05c58fd6a60e080a','02958343_aa41aa1837c809e1e12eceaa46673a5d','02958343_a83c45069b2925efa7e7e5ea49ad8e45','02958343_6c5c45f7a474daa9a134736201a79843','02958343_ca5236a5d06b9bb13fcfdd465734daf8','02958343_7ed6fdece737f0118bb11dbc05ffaa74','02958343_ba0ac1d1e25d3fad63f2c3a55558a78f','02958343_768ea3241699f663f1cb19f636b1c2bd','02958343_cdec84be0cc9364eecfe83f5db813c4f','02958343_235392f8419bb5006a34aa94ca8a3355','02958343_d80658a2f50c753cf1335b4fef92b83f','02958343_7b2ad420c7829e881cae32f43c09c982','02958343_2181653ec5313196d2c8600344d8bfab','02958343_cd85df142f1999e5f38ed4497f2c53c','02958343_da5ee2c950a848f0af8a2e210ebd5168','02958343_e3d7833469729b2024da76692f3228e0','02958343_f2f62db1a9e5823a7aaf6e2fd8453e07','02958343_18c06b8c38623c0b4046e8fe9dfc34b5','02958343_c12424d1cb48ce0fd0a4f72b67c7f064','02958343_eebbce8b77bdb53c82382fde2cafeb9','02958343_c4941d6a2266813c3a2b1a2e5e169910','02958343_3e2c3cb4f4c65b9cde9d4070fcdfa604','02958343_363ddd7ab72bd485be40bb45ea25a041','02958343_2d730665526ee755a134736201a79843','02958343_3645fce32715e0a4bda72093f9b5aa73','02958343_36c2770d00fdd0bdf1ee968c9039cc3','02958343_30774e3218da1f793eccc98914b46c47','02958343_d2efbf5a3b7ddbf94c0aa7c1668459cf','02958343_f21188e5f1a6468050bb0437668bebb7','02958343_ad00611d36e535f266d77f2d6fcbca33','02958343_819b98c138192c88e5e79d9024e2fcae','02958343_d5c4532a34ba10e6f9798a883006064f','02958343_7337679ad4bb8f4016abce8cb03e7794','02958343_1f191e0327ce54474cdd04162f008888','02958343_e8745e2d659061ee4a15d27f5dbfc7ba','02958343_dd1bc8c4063a6521456a647a9e7d914e','02958343_8d14c94dd325400d93b973d059f27e65','02958343_272791fdabf46b2d5921daf0138cfe67','02958343_4cabd6d81c0a9e8c6436916a86a90ed7','02958343_863d6f24aa1a478e569564f61ef539e3','02958343_68b4a03cd8d49553e98e65cfc071e8a0','02958343_2fe4a878e34bd3bab8013668e30e23b0','02958343_a49107f738b26379428df271ebc70bc0','02958343_8a28abfb5751e767b9f455b31f6fc3b6','02958343_669974eb491f2bf7f8883e486ec8cb7','02958343_430941674faedcff6436916a86a90ed7','02958343_11a96098620b2ebac2f9fb5458a091d1','02958343_fc28356cd7948b90466f54ef02e60f2f','02958343_3129657917191e101f0d59cde6139796','02958343_67aebe9ff1f103e18d1e606155667e23','02958343_84dc5b9d1a60419b7cbc6cda01aaca49','02958343_e0762bd3cd381408bda72093f9b5aa73','02958343_bc9c588a00ae179fa2645d665a7d8fa','02958343_7da7ba42dbd0a0f9be40bb45ea25a041','02958343_82ede85c805bd5a85af609a73d2c2947','02958343_bbaef5a610b0b4d5368f3995546e59c8','02958343_97831a753d80d66dfd24692312e9de8c','02958343_48723bca810f80cf7c84d27684eb86f7','02958343_12d7c4013415ea147f5b0cb87a91de52','02958343_fc620f7906f444f1ec403de85b47bd60','02958343_174f1a421f652029d577c0ac53e96823','02958343_4036332be89511e31141a7d4d06dc13','02958343_c8b196595745bbd241c181f4a7e1bfa5','02958343_3044f0bf0ab7fd8d476502dcb0dc5465','02958343_c53256341ac5693c66d89345e534c861','02958343_557315ec87e7ab9d3189f4fd2261a1d0','02958343_b8599e22b152b96e55e3ad998a1ecb4','02958343_3220cc9f67cd763af63ee8a34069b7c5','02958343_2a07432c2860b54becf71e2e014ff6f','02958343_4d22bfe3097f63236436916a86a90ed7','02958343_4eb5ec5502561124875fb780d36841f','02958343_4dd97a6805c2797d18d95feceda870ca','02958343_7f4dbefeaeda54628ccbb4eb8965b05','02958343_1ba30d64da90ea05283ffcfc40c29975','02958343_db432e9f280ffb1e3dd4bdc1dbab98bd','02958343_6b0238b41337365a3330c5ee7577e4de','02958343_ec67edc59aef93d9f5274507f44ab711','02958343_50f4fff3a26ea3518b3ab49d2e0e41ab','02958343_b2b2f4952e4068d955fe55d6e406ecd4','02958343_1198255e3d20d2f323f3ca54768fe2ee','02958343_a5dc2526c9ef78b96212c8f6cd06e','02958343_92cc3ad1d3da26955fcb05674109534a','02958343_e9738c96c8ffbdfdeae19b6e682da29','02958343_61bcc13c67a92542b6aab5f7ece0e6cd','02958343_ffb4d9920493f1e5c29076ad43b687b5','02958343_2dd174957a2053345fcb05674109534a','02958343_2d9b790608d32763ec2f3f4c642b88b2','02958343_831a3689b2f48664473f10e6caaeca56','02958343_ca0f99974520bde12776450c3e3bf20a','02958343_9fa56c19e4d54cca99c8d14f483ffc82','02958343_139718b631cbca546a36136419d55d5c','02958343_28bb7eaa8037a2e9afe1d4530f4c6e24','02958343_c849164176944e08e39b6a0d304ab967','02958343_5b925881cf8678cabda733a39f84326d','02958343_91b636d0c4729cda1d9cc9d194c8533','02958343_b0a659083ec6e936ca92a4cdad802b45','02958343_d2064d59beb9f24e8810bd18ea9969c','02958343_a2fa0bfd39718f1688a610ac9b7aaa40','02958343_df00eb409d4e8fcec07224da8e53476','02958343_7e7e5752ce2aebd46034a921cc85e098','02958343_e1197a4adc50d16abecf71e2e014ff6f','02958343_5c4bb9e23c6cd8511371f3c322b54f2c','02958343_6acb271397e6f9b9e858db1dc3499392','02958343_5d2e0f8fa5d5bc1496bb71fec38e082d','02958343_4f2ef861d32a6f0b45594023db7cd10b','02958343_43553b5efc2674cee4b68d3b17c43658','02958343_575266906372ef117cc922af3684d251','02958343_7521398f7ab70a073c1d9add3a87bd2d','02958343_554bfeff3c44a3d6425b2c354eccabaf','02958343_993bd3b6fe7c6e32cbb047938846b5c7','02958343_dee6c7e696048330ccd4ba9035439a85','02958343_9698778dc63d5874eee70745894f83bc','02958343_f4822aa5b83b28cb35840786ceee5cd2','02958343_f4da249169898dd915212cd62adf957e','02958343_718bfae0c87ad9fdb04112587bd2b79','02958343_b8d3a079edbc04fe51a95aaa6caba1d3','02958343_1a3782ae4bd711b66b418c7d9fedcaa9','02958343_b41bb2a3159a9506977b27045b1d8055','02958343_414ae320397821af8bf92e87e504146a','02958343_55785c5e30e293e03146b856dc99bd62','02958343_6d7472ea15dd5c18433f1e7c64b884cb','02958343_cb0bffd770644cebcfd826dd468a5497','02958343_56e0fef0632aed0f1d27be7764701cfe','02958343_4c3b9ecbafc80b9cd485372bb746f3c7','02958343_e84eb770bb6cedf3bda733a39f84326d','02958343_d6dab47acb946364f0cf9a4b3162f487','02958343_a3672e5ee27e389ab19dbf7b5aff7ec6','02958343_80cae0cc66dcb8a88acb0ff76f4aec7d','02958343_37fb762e57f343a7aaafd94b9f216ef6','02958343_5b423f02b76df0ec1472a7f3e4685aa','02958343_747c49bca6d4ae9d7c84d27684eb86f7','02958343_3a0c0927ed24090355f11dda63ed3832','02958343_a053946cd9048d46f200a72c9245aee7','02958343_129921679aaa3009e44df9b78a00d12c','02958343_be28d4b681ab04ecca92a4cdad802b45','02958343_528c01214da6d4bca7fd25564c2e888e','02958343_ef0703db8a04f8c0c0e3666c7d0ec7d0','02958343_89eb1c5370b80567473f10e6caaeca56','02958343_6232fe1824a6d1775b72003cd427d0c1','02958343_d7b8287ca11d565bd9bd5ae694086d5','02958343_2fe7e3fc47dad6c7afe1d4530f4c6e24','02958343_79f4f7378074d3478e42313717d27982','02958343_74cf231265731c2f8a1aed4fb5fe5280','02958343_2e6a9622bf83f04c38ee77d0178bbf4a','02958343_2521a90182ccc29c253c03b7df20edd5','02958343_a5476137d0f2f930425b2c354eccabaf','02958343_5ad82d706e57607ce4b68d3b17c43658','02958343_30e971ea6fceac68f5cb3ca022cf045c','02958343_e169584b7e66ef074051b6e037481c7','02958343_7c13a71834d2b97687cc3b689b9b258d','02958343_a2d1b78e03f3cc39d1e95557cb698cdf','02958343_4d52395f788af7e5a413908c0e169330','02958343_f120085da70b2913627279ad10ae805a','02958343_21e028eacc690c9de13f97dcb961e16','02958343_d07c8208ad9dc35780e74058ee862f05','02958343_167a645149efed1fdca2ca2624f821d9','02958343_6cbadb3a39216f12ac6dec6f3725ccf','02958343_bebfba98a5e97c6180360680c1602c7d','02958343_354c1c380911fd2f4fa6b747e2cb679','02958343_f61888bca4392106bc790478b4a84bf2','02958343_87020c25b9166cf11d27be7764701cfe','02958343_f36ce0c0cd0cfacba7742c4ce47c2229','02958343_12909f5d613953b8b3c9b3f81618206b','02958343_b2f06baf5851e7a36df8cb2765f8ec95','02958343_398a791990b106dda5a4c80d90b70728','02958343_f10e32c6daaf237f13ded1857c15b5b6','02958343_3d6e798bed67ab81f00cd8c386c592fe','02958343_51c957fc4a2690ea7af49dac67ce8f','02958343_1b25c745164e53b822d2fb8fec68f2a1','02958343_620e8aac415e9805ea752ba39dde460','02958343_79b99595059c53108540dd23f35aa602','02958343_abbd90920a240df2ed3696d854eee1ec','02958343_d22a2d20acbdca70c972ff3f74d38438',
'02958343_3a98adfdc309cca9cec94038e2141ac1','02958343_93f298a78be6883916abce8cb03e7794','02958343_3ec7f0347638f7a891eea2fc80d4a25f','02958343_31998170afc1a0b9d13bda570aea1f6d','02958343_95ddaba8142bb8572b12ea83455b0f44','02958343_be7fe5cfda34ba052e877e82c90c24d','02958343_10716a366de708b8fac96522b26f7fd','02958343_3d681ed2a7eef0df28f46021c78a3723','02958343_d72ffa185738bccd10b75223b5be6dbb','02958343_48aaa1fcf8da645c68925c742a212a74','02958343_5be79b1758410803be40bb45ea25a041','02958343_755717e2f9edd1e36782fc9cb2c37844','02958343_d13d0612c64c1c872457c273ba02ebf','02958343_910ba017e13a2220473f10e6caaeca56','02958343_9757fd5be93ee0fc82b157e7120744ea','02958343_57aa7560dcfecea81edf5a868fdffb8d','02958343_709ebbf3588849b88b55a52bfd1cce7a','02958343_13d090612aec3d80ca92a4cdad802b45','02958343_d838c8cb52c92df3b112e5ac235c21b7','02958343_ba89184f58f21ff63343f5fadc4a2136','02958343_f3e467dba61ebb972a84c9dfab949065','02958343_b57bdd19852e0084f7a5eccf728c3b75','02958343_2307ced410b955a8cf1e58caa15acb49','02958343_81c52d54f9719736ce27281f3b76d1f5','02958343_98b30f0a29fe2a1ba7fd25564c2e888e','02958343_8242b114695b68286f522b2bb8ded829','02958343_a39ed639d1da66876d57cf36a7addb49','02958343_15d6cd7877c6601d9ed410a010efa019','02958343_19f52dd4592c3fb5531e940de4b7770d','02958343_c7c3736ad5f3b252e56947f054952694','02958343_1c1bd2dcbb13aa5a6b652ed61c4ad126','02958343_2b0207d7f6a6f23bf0ff8cc77ea4c273','02958343_2bfea38242ba63cce77aa0b62eed1492','02958343_1b1a7af332f8f154487edd538b3d83f6','02958343_59ed9bf99fd1262fd77312c90516c805','02958343_b2e13c37cfaba983321ad52c1815971d','02958343_8df83b28d786ccfc10f2ef3071342a2e','02958343_c16bafa65123cddfce29c905218d4398','02958343_413fcc9afd53136a16abce8cb03e7794','02958343_405cb7dcad3d6f2f65af93d4326737fe','02958343_45745eab59d4ed09e9415adaaf77fdbf','02958343_9d5c0108ce2c848e977b27045b1d8055','02958343_d0ea101dad5bc464a134736201a79843','02958343_a9ae1558ff25e5336436916a86a90ed7','02958343_83f26e6b8298c3a0a134736201a79843','02958343_1f416598fe329a88b1bb46d2556ba67d','02958343_7e4667d837e39d0945e930a0b8a8cbc8','02958343_119033fe083145e22f31600ac759c763','02958343_a8f2c3adc0671c15c64e95fc6a597455','02958343_ca44101f11f4346a34e8e5a47ae999','02958343_5a2d4ea15ef5c18abab6b34711b43bed','02958343_5494ca610eb9fad59bd53ddfa65bb6b1','02958343_5da4c0cd066b7d0889d347432ecb438c','02958343_c234638891f21417ec5e3fe5c33367cf','02958343_c6978e2a0ef9f0df866f1a483075a782','02958343_330645ba272910524376d2685f42f96f','02958343_df72f352c7fedcfad9951d9ecda74409','02958343_83c31a4085063873dc2afbe43bc71afa','02958343_949f6240e1a760992dc53e2d2dfd58d0','02958343_24c0a08cf0f7421d979ef391885ee5d2','02958343_4eb9dbe42616e407b112e5ac235c21b7','02958343_fd98badd65df71f5abfee5fef2dd81c8','02958343_3339caa48a18e4c358db0ef36af1d3c5','02958343_5d62b276cf9582e2473f10e6caaeca56','02958343_19245fb8ee79038fcd059a326bfe20ef','02958343_2bcdaa6516a98b552abd245afcc79403','02958343_b47d993a5e2dd15e3a3aa1d2d3319a4','02958343_cfb6c8867c6dd84c80e74058ee862f05','02958343_e7141fa81a2828841e8bd72b0feca0a8','02958343_66d4d1f28cdbe97559139efcde1fedcb','02958343_9909e197f7383a976d07c55cf995503e','02958343_5876e90c8f0b15e112ed57dd1bc82aa3','02958343_88aae5646dcad7062a9eb0f146e94477','02958343_a03c7c73c067afa9e5bf84cdd88910df','02958343_b17d638e7def9adbc8a6c4a50ada6f9f','02958343_86c8a3137a716d70e742b0b5e87bec54','02958343_ad45b2d40c7801ef2074a73831d8a3a2','02958343_bf493207165e9359492225f5fc55e666','02958343_68e733f38f957332afe1d4530f4c6e24','02958343_65ccd33df41999496d6573f48a06281','02958343_b44b09bdef8fa2209473806fbdf65cb6','02958343_d4919d3f70b699152b12ea83455b0f44','02958343_c3cfbe068adab0579583ff717105f70d','02958343_380e0c29c9ea00e9ce158c6cc0278580','02958343_a0fe4aac120d5f8a5145cad7315443b3','02958343_d8b50ce6cbfb56a4786993ccbbbff425','02958343_9539149f41e453052a9eb0f146e94477','02958343_b36c9481f71c2428ca92a4cdad802b45','02958343_e15f9acabfa0adc5470d3ca356fc4190','02958343_d10226fc9aee707972a38ac2b8f5cd48','02958343_e4bc9cf3aaff441f19d740e0f6a9a113','02958343_704e60e6e5be85e1f500cc506a763c18','02958343_f88b4156c5e8d35ff500cc506a763c18','02958343_3469d3ab2d353da43a3afd30f2e86bd7','02958343_a2f658d639f46d95c6d2c2010c35d0b9','02958343_90f85f62885afeec65ca154580c5c7a','02958343_4fd5c18c1536d65be129fc90649e41d3','02958343_22654a0cc1ba382c4eace6243432632','02958343_8280b8d35355bbd56204845b7cb50f20','02958343_6ca41d6e48d8cda0e7c0978ffb411d3f','02958343_535f244d5b6043e8cbc76a30015552a','02958343_8478439998e4af846602d94d941a9c9','02958343_92a718b74a2e5e84fd2d6c7ed5a8dbd','02958343_3e37a76f38d057cd3f823401cb5b3c88','02958343_cc8b44ddf6ec80fffd8e7b05498794b9','02958343_18ff13d7f181e7625fa21635eac9e4ed','02958343_ddd17a0d7ca713f2291ea03049d40375','02958343_2c3a3033d248d05851a95aaa6caba1d3','02958343_879121a1bb623324eb79f1a2fb4e869b','02958343_7bf415dbff028a3d4470fce578e2b84c','02958343_67c229c70e64a25e69c2e0a91b39f742','02958343_2e1178d969bdb3849ea5c205086e2a63','02958343_99f9ab439e890e79aff8ec395bcde91f','02958343_57a2d812153fa225c740046119b36696','02958343_45953aa831508fb51e0d92ae9d1b10cb','02958343_53e7ed598e9c3a09405f29f7fa3f25df','02958343_61bbfe43afb10fc8360bb9d5bffb2354','02958343_3bf15c48eb9110d16abce8cb03e7794','02958343_b990ae1858bb82c133f84f942f9a2bf5','02958343_ec11fb287c9a68475de701ebc922ac2c','02958343_24b9180ac3f89ba4715e04edb8af9c53','02958343_19541db644551287ee0112963a7e11e3','02958343_5a56285761f2d6cf261c731730128248','02958343_714e69d3b56560ec41a5d15a014fb347','02958343_3a6a1feb338c884a8079d5a13e411210','02958343_49defa8dd73d03f1a7fd25564c2e888e','02958343_ea76015145946dffc0896a3cd08800fe','02958343_87ee241d3d0d1dda4ff3c6764341833','02958343_2fb5fe84c28b8b35cc02882a83047172','02958343_a6d494af391a97686436916a86a90ed7','02958343_841a80eb66a079e8e0f3abdce6812423','02958343_30456a19dc588d9461c6c61410fc904b','02958343_8bbbfdbec9251733ace5721ccacba16','02958343_4f31142fb24b4814ff1370452e3a0154','02958343_c6038e4cf08de1a7c805dfe4ca9f2fdb','02958343_791e45f93e9ba58071a126804ae24042','02958343_3462d5da3654b52d4a47c09276b7f6b1','02958343_7cdfcbaec700fb98d230ef808f13e7a9','02958343_7bf6249a031b5095ddd41159baaa3ad5','02958343_810476f203a99d3586b58a9b1f5938e0','02958343_57e16ac1b026db4e350d065ac10959e0','02958343_df8000281bcfdf0754f3692df239bb9b','02958343_7faf7e8c2f383eafca92a4cdad802b45','02958343_5e014eb2bd03daab9fbe97de4a41d527','02958343_b70d970f8020c25dd141480e2c154d3','02958343_50ba203c086c496df43db49cede9f847','02958343_2fc99d3fe3f1f3b3b5e3401710af905a','02958343_b6f76fc67324911616abce8cb03e7794','02958343_406ff3d73672bb2b21669bcdba443569','02958343_7076464b3733aa38d2c2bfa672ed621f','02958343_c9d53c90471eeb06ed3696d854eee1ec','02958343_1836f75baa094cd9372ca62e6806c5c3','02958343_dc8aef6a8c88997a582e5e3e7771ea25','02958343_6f3887b3b8253284de541e973ae662b5','02958343_325ce7d1af0e0621221f497d46720397','02958343_2fb155f2d36541b5e3bdba9430565083','02958343_eeac3253fc4c0b429092ea6b09901598','02958343_ef966d85be54c98ab002e5b0265e7e9d','02958343_965000959c53a8612fdbcd3e1b829315','02958343_9232d8834704e5f9dd141480e2c154d3','02958343_846f4ad1db06d8791e0b067dee925db4','02958343_625861912ac0d62651a95aaa6caba1d3','02958343_613bf2e7f987553220d9307ef0bda318','02958343_a61488f91b2837f8473f10e6caaeca56','02958343_7d4c3d9795570647657231d17e42d06f','02958343_1ef8f98842f2a388a4dbb766064f8bbf','02958343_2881a09fc1f3d2be9dab4604fbb1a7b4','02958343_556ec1ccfcb79f08a7fd25564c2e888e','02958343_9650fa63c6ec14fd80700cbc107b6f7d','02958343_61f70557b8bda7422ee0f9a97b71d505','02958343_36ba5d46f034ec58236804c5ee26a2ab','02958343_8109ca22dd6b5772bb54d0b0194b4764','02958343_77065a7bc997bae82d5feb260eec50c','02958343_244a8476648bd073834daea73aa18748','02958343_6355bc126ff0c2d9ef923467520bd6ef','02958343_7ff4c1fdfd0e9bc7b99adc532ba20916','02958343_ae086c610d023693d8a99964311c4152','02958343_163786646ae2578749a5fc144a874235','02958343_e866dd4d4bf1f1f5bbadf8db57668863','02958343_d4103822895075e1c6acd56dbe00811f','02958343_891aac401b4a3273afe1d4530f4c6e24','02958343_870086475e8af25bae57d337a2e5e53','02958343_7887e8306742cf844ca84d60642ec7e8','02958343_6208166202d795a2272523adb0c9ecd0','02958343_c004e655af0b35e3bda72093f9b5aa73','02958343_e17065d11b36ab37f9d73bbb584eaa42','02958343_492f36ac59d2d3eb450d7227edc25975','02958343_aadf8736528b0f46857652684714945f','02958343_fce2b933f93d132f4f45033b2f001552','02958343_3cad25b218e0cd506436916a86a90ed7','02958343_63b0fcfb7a1ac7efe8d8cc304201f02','02958343_a17bdad065a0e008a2e48b029cec5d4b','02958343_3980afb8f986988daf285e0d3f56d074','02958343_97128412dfd802be2a9eb0f146e94477','02958343_24c46b3a467bb4954b1bdab82d834140','02958343_fbe6ff98196a8ddf1992fbc3c9e8b937','02958343_c3e49f8c560ccc216108f064aff2426d','02958343_ea7d39fcc3cf045dfc73a41845471b0e','02958343_e999dfb757ddca4830e7f6cd6fb3f1b9','02958343_2a5df4956f694efe829e2483ba27ce0a','02958343_52c0adae9be5dba12e877e82c90c24d','02958343_c76c5d215cfd21cdee10575a68c30871','02958343_3ed07ff8b46b2bdcb1bb46d2556ba67d','02958343_6710c87e34056a29aa69dfdc5532bb13','02958343_dce6f59b6ab987d4bc863bdef4e7bdac','02958343_61f4cd45f477fc7a48a1f672d5ac8560','02958343_1bef8891f35535ac2e877e82c90c24d','02958343_95a6e03656bdff26f69bc9777f9c3c39','02958343_350be6825c19fb14e0675251723e1e08','02958343_885207d4e9d28f317bcd1993e004117a','02958343_29b714c4aee36c9d6108f064aff2426d','02958343_f9f6c13367f93890657766c4624e375e','02958343_9e6156aea0c7e60ff7d6fd2038bf9a11','02958343_ab7b5025c9e9c1921cb81cb1632a5e','02958343_22c0b90fbda00bb9a3a61aa922ccc66','02958343_15fcfe91d44c0e15e5c9256f048d92d2','02958343_8e72ff1064eef473714e6c6511843d28','02958343_14121abc9e2a868e52ab7aae4be20d81','02958343_97970b4b0f351f5a9697635485e4aab7','02958343_c61ec8875746ab78227375499b768057','02958343_dfe114950aa726f1cfd826dd468a5497','02958343_cea62d812396c31a88ed7b6315c3b4a','02958343_c4ee4b9fc4501a9380c4d64ac66d8b56','02958343_ff64fc33b5d8f866d4ad6f63f570d711','02958343_36fe332c1b11696d51a95aaa6caba1d3','02958343_8aa1b368270797bdca92a4cdad802b45','02958343_148ba646cf954b9249352dd33f95cb9e',
'02958343_5823e5205bc7eb46cebc874b6631de1','02958343_7b8bcc3cafd34efa8b7227eb0fb9adaf','02958343_a6a1c91c92f86c463a93df79ef2b80ef','02958343_7275ca45638f16041899a3ad18d10126','02958343_9948d84501b8ab721e7b5f06a32cfcd1','02958343_b67d3833e6991de8dd141480e2c154d3','02958343_996c99bc344453ec6436916a86a90ed7','02958343_b5a6e71a63189e53e8a3b392b986583','02958343_99606d5346d6b958b96244559b61fdc2','02958343_47638c9573ee7ba3d8a1849b0098a5e7','02958343_7ee2193b072afa652935bed12a852dcf','02958343_f2e1db1997b5e2568926f812d9083f89','02958343_332ac5346c7d3c0f8e35db9103756ad5','02958343_586da8cf648767222a9eb0f146e94477','02958343_1dc58be25e1b6e5675cad724c63e222e','02958343_ebc59fa7d366b486122181f48ecf7852','02958343_23e8adb3bf1961f85332d3b92481b499','02958343_46a71fe0e651986fcfd826dd468a5497','02958343_8212b62591234c743a0daf3e5400b95c','02958343_baa2f488ec67a0a7c66e38c3984e156f','02958343_868af17aaa07b069bda72093f9b5aa73','02958343_fc25e4c1bcfd9167b376886260eb15c1','02958343_fa37419c844e77076489e70b7c61a054','02958343_238c6d6da1c8ce2970097c1b40e1ea6','02958343_953531696c554fb275dadc997718614d','02958343_fcbf9e1dd55ab172ce27281f3b76d1f5','02958343_605be4facdcdfb194dcb1867559ba976','02958343_75bb1fc144e6d17a6d00e450aa03077c','02958343_45d94dee6634efd516abce8cb03e7794','02958343_921f87f3d9a4cb8ddb37d391409760c4','02958343_60aadbf4a0a42360ab62a01524fcb1ec','02958343_7e7cc90bb7f265d2b3cf5236f651a8e6','02958343_149978eefad83cbafd8e7b05498794b9','02958343_1548f5fb0684d08c63155b8ebc275bd1','02958343_25d92177ec6bd745deadc9ca0263db5a','02958343_7121e0332f0c2e0551a95aaa6caba1d3','02958343_3d3a1207dac28b9340d2ba94749368ce','02958343_1569406dfc3b7ecba9fe1734a6086750','02958343_932363431a35b189898b91227342b00c','02958343_528fffd59eee9bc5851f021b9ed69c58','02958343_39ec376b0df877986483e7894702b192','02958343_29043510fd903bae457cdd14086d7361','02958343_fd7741b7927726bda37f3fc191551700','02958343_ffbf897d9867fadff9a62a8acc9e8cfe','02958343_6c449b92891754c6b8b6b17d4ce17d67','02958343_c23a65ae787245248580e2c19c4f9aaf','02958343_233ac4ee75d1ff0c6d111cf7e70d924e','02958343_d1dcddb5b1d7404dd9b0c189eb588ce6','02958343_c887bed724f4a30c31d6c59225b395cb','02958343_4b67e004d83d62bca1aea50fbc4b17d','02958343_536b6629c4f60d07e78002a96f52ef26','02958343_71304f56bb1165e7f42b5c72b4901f94','02958343_d810d7f83632da71556235a31d374eb5','02958343_40953c3fd24e9d65ecf689885b7c1e59','02958343_1d4066f8ae88a1ebec8ca19d7516cb42','02958343_82c6851526bf7350b5554d042286b030','02958343_4e42e2b6986a3d86a20249b45c17a5c9','02958343_ec07cd8db8f2bea851f021b9ed69c58','02958343_76f35efa4083dc6a4d31b03e74c723a3','02958343_64f940ade3f61f976a106c3e1a10b659','02958343_1d4b2404a00ef4bb627014ff98c41eb1','02958343_ab8b6d39057d2f6cc86779a6788ad464','02958343_db216ae493f303f35b4953d8add91f','02958343_e2bc765fc68afde6afe717997470b28d','02958343_24819ffdc34b28efe4bee94a37836d67','02958343_63f6a2c7ee7c667ba0b677182d16c198','02958343_7582e942f3e60a7c1477c1a2d9ef8312','02958343_9d82d5874349f623d834dead2eb68d68','02958343_c48a804986a819b4bda733a39f84326d','02958343_d28d00d6488ad1a78079d5a13e411210','02958343_3ac08e66bd7da4c35da01f298003d56','02958343_c1186d49101dcd513a0daf3e5400b95c','02958343_105dedf1b70c2826b2dcc642c86ae8f4','02958343_b370e4c0d05df8eaf48062edccab3fbd','02958343_ddea3123599a628ebecf71e2e014ff6f','02958343_45d4fae3d107296728e9ca8e8fb04e0a','02958343_2861ac374a2ea7f997692eea6221681c','02958343_bb7fec347b2b57498747b160cf027f1','02958343_40c2b97577b43161aaafd94b9f216ef6','02958343_efade459a90b2b143337cb9d908ce86e','02958343_e05680db6f028c15bda733a39f84326d','02958343_1079efee042629d4ce28f0f1b509eda','02958343_afa0436d9cb1b19ec8c241cb24f7e0ac','02958343_6103654b252c5d3bb1bb46d2556ba67d','02958343_e46d79a5d356436f23a5d95daeb50835','02958343_89c7e63c3d3d14aa17b597d473206848','02958343_318eaf9f125d8296541e8704b64e3884','02958343_2236a1b9cde71eff13d31c5a107f3c4','02958343_862a345b6328d641ef3ecc8551d2c1fa','02958343_a2c9c1b4bf918cf6d2dcdf586ee56d5a','02958343_854bb96a96a4d1b338acbabdc1252e2f','02958343_8e9f7699e30cdd8c247a5be450795511','02958343_ef2655aecd7d8f2b6fca0ec9a39d7a9','02958343_856c62efeff8401567f6fefc01cc7126','02958343_259bf3c89b0b2152c1f18a2d53a6674a','02958343_c12a701bbdcb3df7473f10e6caaeca56','02958343_8648667e03bde366b17445a1c29f6d34','02958343_86f1cbcda59640594dde7b6e74a2cede','02958343_65d6433043c40046b82c0841410a924f','02958343_8fc220461ea512f3abeba927b56dd398','02958343_9e3a69fc219ef73d37c910d2f91b3d73','02958343_44bd1920adb5fdbb473f10e6caaeca56','02958343_425db95a3377f4d6e62a01eefce42a80','02958343_ff267b1a6d986426c6df82b90873315e','02958343_ef15b938dcfa9893c4d922e8a1141322','02958343_39e10c5d24fee4a6311f5d9a1681aa3b','02958343_296a15d4e4b903db94b42287616a3ea7','02958343_d2776550e240c0d642fb51f57882f419','02958343_6a348343b90f8f06a78cb4f1b66f009e','02958343_18aad9d102afbca57ba2273581c30cb','02958343_4b841ea5b31090fe2bc9f17412005422','02958343_8c1664cc8771aa3fce95c44a0ed1e01b','02958343_e4b5734836d9519aa8a84951596cc1','02958343_eb144af0fef08314f00cd8c386c592fe','02958343_f6a93b95e10a8b2d6aea15d30373dbc0','02958343_a4fc879c642e8fc4a5a4c80d90b70728','02958343_63599f1dc1511c25d76439fb95cdd2ed','02958343_d20990638711f55967bf54a1f364120','02958343_ee5e6649db524dc2eb22840c40c3154b','02958343_42dae5b435c27851b11647ffa4306609','02958343_f76b9a9455b20cd875a45359f7e88a3d','02958343_98fa551211d228ef6a089bd459bbc1be','02958343_9e2e375fd5fd55b02a9eb0f146e94477','02958343_fa563c2b77839dafc0e3666c7d0ec7d0','02958343_3ffd5155eaeab76bb17445a1c29f6d34','02958343_2cb6de89f5b6e702b626f6a649199824','02958343_11e5b7d67058e1d75f67208653687b70','02958343_a08b151ac5254df184bf231ea6363fab','02958343_793a8675d7a5fecd653effc8a32f84f1','02958343_82fdfc4ecc49072c3ffe0e5069bf1eb5','02958343_73e977c312f8628b1d65faadf0df8f28','02958343_6af0ad6553d3f42f21f6e2b0f75cf9c4','02958343_51f4aebb148459a45fae7711b4095f8','02958343_ba3e00431d584664c0f081c0bea90dfe','02958343_4e7d91a6e2300d88a3049d0dcf503cdf','02958343_25480875a6be8e11afe1d4530f4c6e24','02958343_9f703e578b4b36295b74572d48ff6382','02958343_c4d49c0625be70c417da7541f1b2fa76','02958343_d849e0fee026c98aeece2324fbbe339','02958343_ad6572f7ac90b9bf2949d5274e5ab643','02958343_b67af8c92198eab432e9b7d6df5ccd43','02958343_61251733434b9b0c15a23f2b45e10de5','02958343_2bbea02b59ed2bab944bfc22204b55bb','02958343_5ad4cc3f8e191c61d31d4c555d4c5a0','02958343_f06af3b73004c92ec7193c87bbfa9088','02958343_52a1d23a09e38c4d50577cf04f3bf74a','02958343_d691906c87bb2850a9733fa2ac6b95bc','02958343_4270f4f3372a1b24546b7395fb17f97e','02958343_752a3ce746670be176ad064d1c5fdd7c','02958343_3163c8037d5782365688db6590f826c8','02958343_3373140534463359fc82e75321e09f82','02958343_ac85727971fe63dd2c67ef33d7521ade','02958343_cf9e82b3235f62c949956811ccd3041','02958343_dab0cd8adac9404780575af49bfeda6','02958343_3d2fbd9bfdfe08573a93df79ef2b80ef','02958343_88ad6f5df57cf8ea16abce8cb03e7794','02958343_65c225fae513a6dbe7b23463fd9b0ba1','02958343_3ff887eaebf0bc7e9d2b99af43da16b3','02958343_7240a21ee34bef83dd141480e2c154d3','02958343_5822af4cda46d8c2f952aa5aa5267659','02958343_9a2854600f24017949b12cf3977a48b','02958343_67e2e5470d27e605d3c820a40c219fa9','02958343_c4f6540454e65939921cb81cb1632a5e','02958343_3ddda21d4496fbc693680c5a9a367b4a','02958343_c35ebd98decdebb9db7706d93442f2a7','02958343_5c29bf38845b4ecbea0f3fb9c87b9c6a','02958343_96c404939bdba58331ec7db1bc2ab2b4','02958343_9cabc9b21a7c5fcab02964031d37f87','02958343_7e12d83df581424ee61b9ff60b1be412','02958343_9698be0fd3516f01fbeda5389ab05f5f','02958343_ccac541c0db2044736815730d7fe4119','02958343_caa26e8b5033be6ac02f176e44f0fcec','02958343_8b177994dc29a707e363d824c14767b2','02958343_4ebf1a8cbbd4a05228044fe9244db50a','02958343_4dca3760ae9748b6b0aa56928723eca5','02958343_2650ad9e7a1d0ebf6df8cb2765f8ec95','02958343_c31891b69780886ffb907109397a6c7a','02958343_764f08cd895e492e5dca6305fb9f97ca','02958343_d4d7d596cf08754e2dfac2620a0cf07b','02958343_974c3d82f8726f086b418c7d9fedcaa9','02958343_b56bfe0649294ebecb02238be5da228','02958343_5e87b04efd58cc8922412d2a728de1d5','02958343_42e6ce03b361102ab86e0633bb69faea','02958343_f4fffa99e8c2b9b627a00642873b9759','02958343_69126951b42485ff88cf40718544e7cc','02958343_5fe9cca902d8135aa36fba949f601317','02958343_30e84a2b779b0e89473f10e6caaeca56','02958343_189cffefcdd5cb071a126804ae24042','02958343_5e5d7901f587c39726d36807b4d406ea','02958343_504e8dbdccd8beea7e488037e176d2f0','02958343_8cbc8e27e885eb763ffe0e5069bf1eb5','02958343_3da0d2ecb594ceae348b30181b0729b3','02958343_2ba7ea78b9b6e2a6b420256a03f575c0','02958343_e738466fb6cc90530714334794526d4','02958343_8bd0d26352ea9de9becf71e2e014ff6f','02958343_813bedf2a45f5681ca92a4cdad802b45','02958343_18d9ac72442260e0e97c6bb243ef67d','02958343_341b474e01e039af59139efcde1fedcb','02958343_1f37a6fbdf7c807e7d439639178556bc','02958343_355e7ad1d5664421898b91227342b00c','02958343_8e8da02ac0168a47ec5e3fe5c33367cf','02958343_6471b4eccdbba210ba9a2870774c1424','02958343_5881807902ace2dc7d26edf2a8ffb68','02958343_37954fb8bb9a7e351076d1567fc9aa51','02958343_c8fa4fd7fc424121932abeb6e2fd4072','02958343_d94f5345be1d81a751a95aaa6caba1d3','02958343_c721c1e89e68e01fec4be884ee173bab','02958343_dd84236f0ef27765a134736201a79843','02958343_4f9db143aa853e69b207e9cc82f7c858','02958343_47716b1acaae5b8083653a771e25099b','02958343_1714b6e57c8c4983fb1aad5dae793ff4','02958343_10d388f6f578e4e8851f021b9ed69c58','02958343_ab7eaf660f1bf4db23fa56f2e03fa992','02958343_1c66dbe15a6be89a7bfe055aeab68431','02958343_6d493677c8dfb9d8321338b7ef756ea5','02958343_bad0a52f07afc2319ed410a010efa019','02958343_e2a4635c392e750abecf71e2e014ff6f','02958343_73140624a636925ada37be44e2d84539','02958343_1e12573f2d8ffca667789dfcc3262f70','02958343_c850fc6ea372c568a7fd25564c2e888e','02958343_2a2a1822fcf96394ed3696d854eee1ec','02958343_828c32ae594a5409b1bb46d2556ba67d','02958343_909422a9d1b42e1380360680c1602c7d','02958343_94c0575659c6cdf2091b4cb93147ff9','02958343_816f9a529bf7b14817d5c90faf553cc9','02958343_d967be366b99ac00bac978d4dc005d3','02958343_96c84869cb3c6657e49167a1ad5be1be',
'02958343_c9e555bb1a17cfbc5d918097f81825e3','02958343_227ab69792241382acfaf62fe6ca656','02958343_f8885a2372b427f8f2626f7f7bd2296e','02958343_86d5ba5d14672ae7becf71e2e014ff6f','02958343_368583768dbe789980360680c1602c7d','02958343_1ab80bc91a45b7d0a31091d2234b9f68','02958343_93c56f05dfcd4248274334f2451a8eb','02958343_4b7b3b54dc04df53c19f1e8ed99ac2fa','02958343_d56104e27f9d5f55725a7749daae1afa','02958343_7e5b55d43322de49295eb8d2a941a3e1','02958343_cded640727157c18c6142312719d87cf','02958343_ef05b5fa8e2377f8fa7a46166f316347','02958343_d28ad2ed7b1ba665b1bb46d2556ba67d','02958343_b059f09a0b26d4b5cfc78902445ccff8','02958343_530234273d5e31a57c7baeeaa3dedfc','02958343_cf32af5869fee4d34eb766e5a46fceab','02958343_a886262ac3be5ca7c126a452758c84e7','02958343_8c01303b68d30be5b9ad5039d820c924','02958343_18e16129375e723e6f8f8c736fcc7940','02958343_26eb9c499fe0ff9edc10f9c1726304b1','02958343_8ffc484a850350f916abce8cb03e7794','02958343_470fc68779da0f923d68b6d025852738','02958343_73723a79817b594098c11e8f05368fe','02958343_1dbb24dedcb23beab1bb46d2556ba67d','02958343_26c2c91d8eb660ecbeaa545f7f633287','02958343_31cfc24310109174b11647ffa4306609','02958343_ec469722be9d015c1ef32d215d1c8df5','02958343_a59c142ed6850a26ad4bd5fc1269475a','02958343_23bfcd49917919006a34aa94ca8a3355','02958343_c2d2eae7ef1a34e1f500cc506a763c18','02958343_8824c06f737f2888e35db9103756ad5','02958343_373ddcf15e21eacc3cb72b063dc95295','02958343_8577f3f82d5ce3ecc2fe329dd557eb52','02958343_b790d70257a8191a29984c4afd2e98a4','02958343_282293948b21262769416db9b743e50b','02958343_37a7f79b9eeb5096b11647ffa4306609','02958343_5a91741d3a0ca58cf200a72c9245aee7','02958343_c8c51e709d1cdbe0673ddeabdcc8c6e','02958343_9a152b11907b11074549b3c52ae0632e','02958343_65c067fcae3292d0e7540f431cab4686','02958343_e1134a7e936b516fb1bb46d2556ba67d','02958343_bfa01c632be2eb06e8a3b392b986583','02958343_3776e4d1e2587fd3253c03b7df20edd5','02958343_7a0f252961e5bffad95840a0da458be0','02958343_cf698011f90ac05f253c03b7df20edd5','02958343_52a988b361f6cefd685753e73124c6e8','02958343_e2349120e4c089ef2fb4628a7a8b337f','02958343_f60779c934ee51eddd1e15301c83686f','02958343_d6089d1b75c35945b7e8c57d131d2ca7','02958343_72ad8ebcd7dfbc87368990af61c704f7','02958343_4493638824352150940e51eee9dd2409','02958343_bbf01f037b55306f8c2fb4d10f176f65','02958343_92ff3c7b2b8b1f65e2693f33cdca907b','02958343_a53f8a03871fd1d1c4e15ee0eb85afd9','02958343_5135ad38043cfe64eb766e5a46fceab','02958343_7dda382210dd768680e74058ee862f05','02958343_996354bbe7baa2b2f24437126510c3c7','02958343_2401f097228fdc1348b30181b0729b3','02958343_7b74eb8f053aabe64eb766e5a46fceab','02958343_147889b73fa491d82e877e82c90c24d','02958343_d6e27c6523a3f2b58b8cd97e9d1c6a86','02958343_6df1aadb0dbc696cf568f785e33a81d8','02958343_e14338cbdf53c0ae3a0daf3e5400b95c','02958343_8c835911f332db4ca92a4cdad802b45','02958343_191f9cd970e5b0cc174ee7ebab9d8065','02958343_3b578ddeae9eeb9ffb8de648691848ea','02958343_37c5ac3d5b34761add75f724c0ccbe00','02958343_4baaabaced0c9e0ac0e3666c7d0ec7d0','02958343_a944ae569bbff87716abce8cb03e7794','02958343_e7add7a018da8056bda733a39f84326d','02958343_66edab2d079680f876ad064d1c5fdd7c','02958343_460f7950d804d4564d7ac55d461d1984','02958343_6749e5a1458ead5abda733a39f84326d','02958343_8053e014516531ddc3f500d7b182f6','02958343_aebaeaf0dfeb9fbe13ded1857c15b5b6','02958343_193ec1089f0a98a36518e6cd1fbc5fab','02958343_56dc27e4374cf87132eaaf3b7c9989f6','02958343_e9c5e6d46c47129c5b72003cd427d0c1','02958343_4de80d6104368f4be194052f3f12cb2e','02958343_95d18b69c9624a05473f10e6caaeca56','02958343_a13fa4cf0dfdd5b58f7f0d2c9c57704b','02958343_b72355cdbf1127f4becf71e2e014ff6f','02958343_1da433472693082a3b03cab05e253d9','02958343_647faf34f7fdb50c16abce8cb03e7794','02958343_1104f0924e03f2b6fc5886e868449015','02958343_c7bd3c33967a3f80d292079a67d9d7f4','02958343_ba1b8956b1d84856369912a1ddf80ef7','02958343_e625eb804f2fb6caa26598ab726b7540','02958343_b22aa9fcad2104a634fad4a395c51fe9','02958343_ebbbc8673928ad37308fb27494afe372','02958343_9e4a79d30930cc2fcefa74f1d0bc6e6','02958343_faeda504709a7af489d347432ecb438c','02958343_5f2ae8bd2d571e7c6436916a86a90ed7','02958343_49e8bd4cf55ea566d97f019cb91636fd']
# carrot, onion green, parsley
# module_dict_all['describe'] = ["egg", "tomato", "jalapeno", "chilli"]
# 
# module_dict_all['describe'] = ['cup']

# attributes list
attribute_list = ['material', 'color', 'size']

module_dict_split1['combine'] = {'material': ['metal'],
                                 'color': ['green', 'blue', 'yellow', 'red'],
                                 'size': ['large', 'small']}

module_dict_split2['combine'] = {'material': ['rubber'],
                                 'color': ['cyan', 'brown', 'gray', 'purple'],
                                 'size': ['small', 'large']}

module_dict_all['combine'] = {'material': ['rubber', 'metal'],
                              'color': ['cyan', 'brown', 'gray', 'purple', 'green', 'blue', 'yellow', 'red'],
                              'size': ['small', 'large']}
# relations list
module_dict_split1['layout'] = ['left', 'left-front', 'right-front']
module_dict_split2['layout'] = ['right', 'right-behind', 'left-behind']
module_dict_all['layout'] = ['right', 'left', 'right-behind', 'left-front', 'left-behind',
                             'right-front', 'front', 'behind']

module_dicts_zeroshot = [module_dict_split1, module_dict_split2]
module_dict_normal = module_dict_all


module_dicts_inside = dict()
module_dicts_inside['describe'] = ['cylinder', 'cube', 'sphere', 'cup']
module_dicts_inside['combine'] = {'material': ['rubber', 'metal'],
                              'color': ['cyan', 'brown', 'gray', 'purple', 'green', 'blue', 'yellow', 'red'],
                              'size': ['large']}
module_dicts_inside['layout'] = ['inside']


module_dicts_back_front = dict()
module_dicts_back_front['describe'] = ['cylinder', 'cube', 'sphere']
module_dicts_back_front['combine'] = {'material': ['rubber', 'metal'],
                              'color': ['cyan', 'brown', 'gray', 'purple', 'green', 'blue', 'yellow', 'red'],
                              'size': ['large']}
module_dicts_back_front['layout'] = ['front', 'behind']


pattern_map = {'describe': 0, 'material': 1, 'color': 2, 'size': 3, 'layout': 4}

zs_training_patterns = [(0, 1, 0, 1, 0), (1, 0, 1, 0, 1)]
zs_training_probs = [1.0 / 3, 2.0 / 3]
zs_test_patterns = [(1, 1, 1, 1, 1), (0, 0, 0, 0, 0), (0, 0, 1, 1, 1), (1, 1, 0, 0, 0), (0, 1, 1, 1, 0),
                    (1, 0, 0, 0, 1), (0, 1, 1, 1, 1), (1, 0, 0, 0, 0)]
zs_test_probs = [1.0 / 6, 1.0 / 12, 1.0 / 12, 1.0 / 6, 1.0 / 12, 1.0 / 6, 1.0 / 12, 1.0 / 6]


def expand_tree_with_inside(tree, level, parent, memorylist, child_idx, max_layout_level, add_layout_prob, train, obj_count, zero_shot=False,
                metadata_pattern=None, back_front_only_flag=False):
    if parent is None or parent.function == 'layout':
        # sample module, the module can be either layout or describe here
        if level + 1 > max_layout_level:
            module_idx = 1
        else:
            module_idx = 0
        tree.function = module_list[module_idx]
        if zero_shot and (level == 0 or tree.function == 'describe'):
            r = random.random()
            if train:
                metadata_pattern = _choose_pattern(zs_training_patterns, zs_training_probs, r)
            else:
                metadata_pattern = _choose_pattern(zs_test_patterns, zs_test_probs, r)
        # sample content
        if zero_shot:
            assert (metadata_pattern is not None)
            dict_index = metadata_pattern[pattern_map[tree.function]]
            module_dict = module_dicts_zeroshot[dict_index]
        else:
            module_dict = module_dicts_inside

        if tree.function == 'describe' and child_idx == 1:
            tree.word = module_dict[tree.function][-1]
        elif tree.function == 'layout':
            tree.word = module_dict[tree.function][-1]
        else:
            word_id = random.randint(0, len(module_dict[tree.function]) - 2)
            tree.word = module_dict[tree.function][word_id]

        if tree.function == 'layout':
            tree.function_obj = Layout(tree.word)
            # print('add layout')
        else:
            obj_count += 1
            tree.function_obj = Describe(tree.word, obj_count)
            # print('add describe')

        tree.num_children = children_dict[tree.function]
        if parent is not None:  # then the parent must be a layout node
            if child_idx == 0:
                parent.function_obj.left_child = tree.function_obj
            else:
                parent.function_obj.right_child = tree.function_obj

        for i in range(tree.num_children):
            tree.children.append(Tree())
            tree.children[i], obj_count = expand_tree_with_inside(tree.children[i], level + 1, tree, [], i, max_layout_level,
                                           add_layout_prob,
                                           train, obj_count, zero_shot, metadata_pattern, back_front_only_flag)

    # must contain only one child node, which is a combine node
    elif parent.function == 'describe' or parent.function == 'combine':
        # print('add combine')
        valid = [2]
        # no need to sample module for now
        module_id = 0
        tree.function = module_list[valid[module_id]]

        # sample content
        # sample which attributes
        if len(set(attribute_list) - set(memorylist)) <= 1:
            full_attribute = True
        else:
            full_attribute = False

        attribute = random.sample(set(attribute_list) - set(memorylist), 1)[0]
        memorylist += [attribute]

        if zero_shot:
            assert (metadata_pattern is not None)
            dict_idx = metadata_pattern[pattern_map[attribute]]
            module_dict = module_dicts_zeroshot[dict_idx]
        else:
            module_dict = module_dict_normal

        word_id = random.randint(0, len(module_dict[tree.function][attribute]) - 1)
        tree.word = module_dict[tree.function][attribute][word_id]

        if isinstance(parent.function_obj, Describe):
            carrier = parent.function_obj
        else:
            carrier = parent.function_obj.get_carrier()

        tree.function_obj = Combine(attribute, tree.word)
        tree.function_obj.set_carrier(carrier)
        carrier.set_attribute(attribute, tree.function_obj)

        if not full_attribute:
            tree.num_children = children_dict[tree.function]

            for i in range(tree.num_children):
                tree.children.append(Tree())
                tree.children[i], obj_count = expand_tree_with_inside(tree.children[i], level + 1, tree, memorylist, i, max_layout_level,
                                               add_layout_prob,
                                               train, obj_count, zero_shot, metadata_pattern, back_front_only_flag)
    else:
        raise ValueError('Wrong function.')
    return tree, obj_count


# expand_func(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot, back_front_only_flag=back_front_only_flag)

def expand_tree(tree, level, parent, memorylist, child_idx, max_layout_level, add_layout_prob, train, obj_count, zero_shot=False,
                metadata_pattern=None, back_front_only_flag=False):
    if parent is None or parent.function == 'layout':
        # sample module, the module can be either layout or describe here
        if level + 1 > max_layout_level:
            module_idx = 1
        else:
            rand = random.random()
            if rand >= 1 - add_layout_prob:
                module_idx = 0
            else:
                module_idx = 1
        tree.function = module_list[module_idx]
        if zero_shot and (level == 0 or tree.function == 'describe'):
            r = random.random()
            if train:
                metadata_pattern = _choose_pattern(zs_training_patterns, zs_training_probs, r)
            else:
                metadata_pattern = _choose_pattern(zs_test_patterns, zs_test_probs, r)
        # sample content
        if zero_shot:
            assert (metadata_pattern is not None)
            dict_index = metadata_pattern[pattern_map[tree.function]]
            module_dict = module_dicts_zeroshot[dict_index]
        elif back_front_only_flag:
            module_dict = module_dicts_back_front
        else:
            module_dict = module_dict_normal

        word_id = random.randint(0, len(module_dict[tree.function]) - 1)
        tree.word = module_dict[tree.function][word_id]

        if tree.function == 'layout':
            tree.function_obj = Layout(tree.word)
            # print('add layout')
        else:
            obj_count += 1
            tree.function_obj = Describe(tree.word, obj_count)
            # print('add describe')

        tree.num_children = children_dict[tree.function]
        if parent is not None:  # then the parent must be a layout node
            if child_idx == 0:
                parent.function_obj.left_child = tree.function_obj
            else:
                parent.function_obj.right_child = tree.function_obj

        for i in range(tree.num_children):
            tree.children.append(Tree())
            tree.children[i], obj_count = expand_tree(tree.children[i], level + 1, tree, [], i, max_layout_level,
                                           add_layout_prob,
                                           train, obj_count, zero_shot, metadata_pattern, back_front_only_flag)

    # must contain only one child node, which is a combine node
    elif parent.function == 'describe' or parent.function == 'combine':
        # print('add combine')
        valid = [2]
        # no need to sample module for now
        module_id = 0
        tree.function = module_list[valid[module_id]]

        # sample content
        # sample which attributes
        if len(set(attribute_list) - set(memorylist)) <= 1:
            full_attribute = True
        else:
            full_attribute = False

        attribute = random.sample(set(attribute_list) - set(memorylist), 1)[0]
        memorylist += [attribute]

        if zero_shot:
            assert (metadata_pattern is not None)
            dict_idx = metadata_pattern[pattern_map[attribute]]
            module_dict = module_dicts_zeroshot[dict_idx]
        else:
            module_dict = module_dict_normal

        word_id = random.randint(0, len(module_dict[tree.function][attribute]) - 1)
        tree.word = module_dict[tree.function][attribute][word_id]  ##TODO: change material/color here for specific vegitable

        if isinstance(parent.function_obj, Describe):
            carrier = parent.function_obj
        else:
            carrier = parent.function_obj.get_carrier()

        tree.function_obj = Combine(attribute, tree.word)
        tree.function_obj.set_carrier(carrier)
        carrier.set_attribute(attribute, tree.function_obj)

        if not full_attribute:
            tree.num_children = children_dict[tree.function]

            for i in range(tree.num_children):
                tree.children.append(Tree())
                tree.children[i], obj_count = expand_tree(tree.children[i], level + 1, tree, memorylist, i, max_layout_level,
                                               add_layout_prob,
                                               train, obj_count, zero_shot, metadata_pattern, back_front_only_flag)
    else:
        raise ValueError('Wrong function.')
    return tree, obj_count


def _choose_pattern(patterns, probs, r):
    assert (sum(probs) == 1, 'Given prob list should sum up to 1')
    assert (len(patterns) == len(probs), 'Given patterns should have the same length as the given probs')
    accum = 0
    for i, prob in enumerate(probs):
        accum += prob
        if r < accum:
            return patterns[i]


def visualize_trees(trees):
    for i in range(len(trees)):
        print('************** tree **************')
        _visualize_tree(trees[i], 0)
        print('**********************************')


def _visualize_tree(tree, level):
    if tree == None:
        return
    for i in range(tree.num_children - 1, (tree.num_children - 1) // 2, -1):
        _visualize_tree(tree.children[i], level + 1)

    print(' ' * level + tree.word)
    if isinstance(tree.function_obj, Describe):
        print(tree.function_obj.attributes, tree.function_obj)
        if tree.function != 'combine':
            print('position {}'.format(tree.function_obj.position))

    for i in range((tree.num_children - 1) // 2, -1, -1):
        _visualize_tree(tree.children[i], level + 1)

    return


def allign_tree(tree, level):
    """
        A pre-order traversal, set the position of tree nodes according to the layouts
    :param tree:
    :return:
    """
    if tree is None:
        return

    if tree.function == 'describe' and level == 0:
        tree.function_obj.set_random_pos()
    elif tree.function == 'layout':
        tree.function_obj.set_children_pos()
        for i in range(tree.num_children):
            allign_tree(tree.children[i], level + 1)
    else:
        pass


def extract_objects(tree):
    objects = list()

    if tree is None:
        return objects

    if tree.function == 'describe':
        objects.append(tree.function_obj)
    elif tree.function == 'layout':
        for i in range(tree.num_children):
            objects += extract_objects(tree.children[i])
    else:
        pass

    return objects


def sample_tree(max_layout_level, add_layout_prob, obj_count, zero_shot=False, train=True):
    tree = Tree()
    tree, obj_count = expand_tree(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot)
    allign_tree(tree, 0)
    return tree


def sample_tree_flexible(percent_inside_samples, include_inside_config, max_layout_level, add_layout_prob, obj_count, zero_shot=False, train=True, arguments=None, back_front_only_flag=False):
    tree = Tree()

    if not include_inside_config:
        expand_func = expand_tree
    else:
        rand = random.random()
        if rand < percent_inside_samples:
            arguments = {'fix_num_objs':2}
            expand_func = expand_tree_with_inside
            max_layout_level = 1
        else:
            expand_func = expand_tree

    if arguments is None:
        tree, obj_count = expand_func(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot, back_front_only_flag=back_front_only_flag)
    else:
        max_num_objs = arguments['max_num_objs']
        min_num_objs = arguments['min_num_objs']
        object_count_range = range(min_num_objs, max_num_objs + 1)

        tree, obj_count = expand_func(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot, back_front_only_flag=back_front_only_flag)
        num_objs = count_functions(tree, 'describe')
        while num_objs not in object_count_range:
            tree = Tree()
            tree, obj_count = expand_func(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot, back_front_only_flag=back_front_only_flag)
            num_objs = count_functions(tree, 'describe')

        # if 'max_num_objs' in arguments:
        #     max_num_objs = arguments['max_num_objs']
        #     tree, obj_count = expand_func(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot, back_front_only_flag=back_front_only_flag)
        #     num_objs = count_functions(tree, 'describe')
        #     while num_objs > max_num_objs:
        #         tree = Tree()
        #         tree, obj_count = expand_func(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot, back_front_only_flag=back_front_only_flag)
        #         num_objs = count_functions(tree, 'describe')
        #         print(num_objs)
        # elif 'fix_num_objs' in arguments:
        #     fix_num_objs = arguments['fix_num_objs']
        #     tree, obj_count = expand_func(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot, back_front_only_flag=back_front_only_flag)
        #     num_objs = count_functions(tree, 'describe')
        #     while num_objs != fix_num_objs:
        #         tree = Tree()
        #         tree, obj_count = expand_func(tree, 0, None, [], 0, max_layout_level, add_layout_prob, train, obj_count, zero_shot=zero_shot, back_front_only_flag=back_front_only_flag)
        #         num_objs = count_functions(tree, 'describe')
    allign_tree(tree, 0)

    return tree


def count_functions(tree, name):
    num_functions = _count_functions(tree, name)
    return num_functions


def _count_functions(tree, name):
    num_objs = 0
    for i in range(0, tree.num_children):
        num_objs += _count_functions(tree.children[i], name)

    if tree.function == name:
        num_objs += 1

    return num_objs

# def _project_bbox(camera, points_3d):
#     points_2d = [utils.get_camera_coords(camera, Vector(location)) for location in points_3d]
#     x_cords = [location[0] for location in points_2d]
#     y_cords = [location[1] for location in points_2d]
#     left_top = (min(x_cords), min(y_cords))
#     right_bottom = (max(x_cords), max(y_cords))
#     # print('-'*50)
#     # print(points_3d, points_2d)
#     # print('-'*50)
#     return [left_top, right_bottom]

# def _get_describe_bbox(tree, blocks, camera, bboxes_2d):
#     function_obj = tree.function_obj
#     # set the bbox for the tree node
#     if hasattr(function_obj, 'bbox'):
#         block_id = function_obj.block_id
#         object_idx = np.where(blocks == block_id)
#         x_top = object_idx[0].min()
#         y_top = object_idx[1].min()
#         z_top = object_idx[2].min()

#         x_bottom = object_idx[0].max()
#         y_bottom = object_idx[1].max()
#         z_bottom = object_idx[2].max()

#         points_3d = [[x_top, y_top, z_top],[x_bottom - x_top,
#                 y_bottom - y_top, z_bottom - z_top]]
#         bbox = _project_bbox(camera, points_3d)
#         bboxes_2d[block_id] = bbox

#     for child in tree.children:
#         bboxes_2d = _get_describe_bbox(child, blocks, camera, bboxes_2d)
#     return bboxes_2d

# def get_2d_bboxes(tree, blocks, camera):
#     bboxes_2d = {}
#     bboxes_2d = _get_describe_bbox(tree, blocks, camera, bboxes_2d)
#     return bboxes_2d

def refine_tree_info(tree, blocks):
    tree = _set_describe_bbox(tree, blocks)
    tree = _set_layout_bbox(tree)
    return tree


def remove_function_obj(tree):
    tree = _remove_function_obj(tree)
    return tree


def _remove_function_obj(tree):
    if hasattr(tree, 'function_obj'):
        delattr(tree, 'function_obj')
    for child in tree.children:
        _remove_function_obj(child)
    return tree


def _set_describe_bbox(tree, blocks):
    function_obj = tree.function_obj
    # set the bbox for the tree node
    if hasattr(function_obj, 'bbox'):
        block_id = function_obj.block_id
        object_idx = np.where(blocks == block_id)
        # try:
        #     x_top = object_idx[0].min()
        # except Exception as e:
        #     print(blocks.max())
        #     print(blocks.min())
        #     print(np.unique(blocks))
        #     print(block_id)
        x_top = object_idx[0].min()
        y_top = object_idx[1].min()
        z_top = object_idx[2].min()

        x_bottom = object_idx[0].max()
        y_bottom = object_idx[1].max()
        z_bottom = object_idx[2].max()

        # bbox = (x_top, y_top, z_top, x_bottom - x_top, y_bottom - y_top, z_bottom - z_top)
        bbox = (x_top, z_top, y_top, x_bottom - x_top, z_bottom - z_top, y_bottom - y_top)
        tree.bbox = np.array(bbox)
        # print(x_top, y_top, z_top, x_bottom, y_bottom, z_bottom)
        # print(tree.bbox)
        # print(tree.word)
        # print('--------------')

    for child in tree.children:
        _set_describe_bbox(child, blocks)
    return tree


def _set_layout_bbox(tree):
    if tree.function != 'layout':
        return tree
    else:
        for child in tree.children:
            _set_layout_bbox(child)
        # set the bbox for layout module
        left_child_bbox = tree.children[0].bbox
        right_child_bbox = tree.children[1].bbox
        tree.bbox = np.array(_combine_bbox(left_child_bbox, right_child_bbox))

        return tree


def _correct_layout_word(tree):
    if tree.function != 'layout':
        return tree
    else:
        left_child_bbox = tree.children[0].bbox
        right_child_bbox = tree.children[1].bbox
        if left_child_bbox[0] < right_child_bbox[0]:
            if right_child_bbox[1] - 5 < left_child_bbox[1] < right_child_bbox[1] + 5:
                tree.word = 'left'
            elif left_child_bbox[1] <= right_child_bbox[1] - 5:
                tree.word = 'left-behind'
            else:
                tree.word = 'left-front'
        else:
            if right_child_bbox[1] - 5 < left_child_bbox[1] < right_child_bbox[1] + 5:
                tree.word = 'right'
            elif left_child_bbox[1] <= right_child_bbox[1] - 5:
                tree.word = 'right-behind'
            else:
                tree.word = 'right-front'

        for child in tree.children:
            _correct_layout_word(child)

        return tree


def _combine_bbox(bbox1, bbox2):
    x = min(bbox1[0], bbox2[0])
    y = min(bbox1[1], bbox2[1])
    z = min(bbox1[2], bbox2[2])
    x_bottom = max(bbox1[0] + bbox1[3], bbox2[0] + bbox2[3])
    y_bottom = max(bbox1[1] + bbox1[4], bbox2[1] + bbox2[4])
    z_bottom = max(bbox1[2] + bbox1[5], bbox2[2] + bbox2[5])
    return [x, y, z, x_bottom - x, y_bottom - y, z_bottom - z]


def add_parent(tree):
  tree = _add_parent(tree, None)

  return tree

def _add_parent(tree, parent):
  tree.parent = parent
  for i in range(0, tree.num_children):
    tree.children[i] = _add_parent(tree.children[i], tree) 

if __name__ == '__main__':
    # random.seed(12113)
    #
    # # tree = Tree()
    # # tree = expand_tree(tree, 0, None, [], 0)
    # # allign_tree(tree)
    #
    # num_sample = 1
    # trees = []
    # for i in range(num_sample):
    #     treei = Tree()
    #     treei = expand_tree(treei, 0, None, [], 0, max_level=2)
    #     allign_tree(treei, 0)
    #     objects = extract_objects(treei)
    #     trees += [treei]
    #     print(objects)
    #
    # visualize_tree(trees)

    for i in range(1):
        print('normal sample tree')
        tree = sample_tree(max_layout_level=2, add_layout_prob=0.6, zero_shot=True, train=True)
        visualize_trees([tree])
        print('max sample tree')
        tree = sample_tree_flexible(max_layout_level=3, add_layout_prob=0.6, zero_shot=False, train=True,
                                    arguments={'max_num_objs': 3})
        visualize_trees([tree])
        print('fix sample tree')
        tree = sample_tree_flexible(max_layout_level=3, add_layout_prob=0.6, zero_shot=False, train=True,
                                    arguments={'fix_num_objs': 8})
        visualize_trees([tree])
